public class Airplane {
	
	private Passenger[] passengers;
	private String airplaneName;
	private int numPassengers;
	
	public Airplane() {//default constructor
		passengers = new Passenger[100];
		airplaneName = "";
		numPassengers = 0;
	}
	
	public Airplane(String airplaneName) {
		passengers = new Passenger[100];
		this.airplaneName = airplaneName;
		numPassengers = 0;
	}
	
	public Airplane(int maxPassengers) {
		if(maxPassengers < 0) {
			maxPassengers = 0;
		}
		passengers = new Passenger[maxPassengers];
		numPassengers = 0;
		airplaneName = "";
	}
	
	public Airplane(String airplaneName, int maxPassengers) {
		if(maxPassengers < 0) {
			maxPassengers = 0;
		}
		this.airplaneName = airplaneName;
		this.numPassengers = 0;
		passengers = new Passenger[maxPassengers];
	}
	
	public void setAirplaneName(String name) {
		this.airplaneName = name;
	}
	
	public String getAirplaneName() {
		return this.airplaneName;
	}
	
	public void addPassenger(Passenger a) {
		if(numPassengers < passengers.length) {
			passengers[numPassengers] = a;
			numPassengers++;
		}
		else {
			resizePassengerArray();
			passengers[numPassengers] = a;
			numPassengers++;
		}
	}
	
	private void resizePassengerArray() {
		Passenger[] newPassengers = new Passenger[passengers.length * 2];
		for(int i = 0; i < passengers.length; ++i) {
			newPassengers[i] = passengers[i];
		}
		passengers = newPassengers;
	}
	
	public Passenger getPassenger(int index) {
		if(index <= numPassengers && index >= 0) {
			return passengers[index];
		}
		else {
			return null;
		}
	}

	public int getNumPassengers() {
		return numPassengers;
	}
	
	public Passenger getFirstPassenger() {
		if(passengers[0] != null) {
		return passengers[0];
		}
		else {
			return null;
		}
	}
	
	public Passenger getLastPassenger() {
		return passengers[numPassengers - 1];
	}
	
	public Passenger[] getPassengers() {
		return passengers;
	}
	
	public Passenger removePassenger(int index) {
		if((index < numPassengers && index >= 0) ) { //&& (numPassengers >= 0
			Passenger removedPass = passengers[index];
			
			for(int i = index; i < numPassengers - 1; i++) {
				passengers[i] = passengers[i + 1];
			}
			
			passengers[ numPassengers - 1 ] = null;
			numPassengers--;
			return removedPass;
		}
		else {
			return null;
		}
	}
	
	public void removeAllPassengers() {
		passengers = new Passenger[10];
		numPassengers = 0;
	}
	
	public double getTotalWeightOfAllPassengers() {
		double weight = 0.0;
		for(int i = 0; i < numPassengers; i++) {
			weight = weight + passengers[i].getWeight();
		}
		return weight;
	}
	
	public double getAverageWeightOfAllPassengers() {
		return getTotalWeightOfAllPassengers() / numPassengers;
	}
	
	public int getNumberOfPassengersAboveWeight(double weight) {
		int count = 0;
		for(int i = 0; i < numPassengers; ++i) {
			if(passengers[i].getWeight() > weight) {
				count++;
			}
		}
		return count;
	}
	
	public int getNumberOfPassengersBelowWeight(double weight) {
		int count = 0;
		for(int i = 0; i < numPassengers; ++i) {
			if(passengers[i].getWeight() < weight) {
				count++;
			}
		}
		return count;
	}
	
	public void increaseWeightOfAllPassengers() {
		for(int i = 0; i < numPassengers; ++i) {
			passengers[i].gainWeight();
		}
	}
	
	public void increaseWeightOfAllPassengers(double weight) {
		for(int i = 0; i < numPassengers; ++i) {
			passengers[i].gainWeight(weight);
		}
	}
	
	public void printAllDetails() {
		System.out.printf("AirplaneName: %20s | Number of Passengers: %4d | Airplane Size: %4d\n"
				, airplaneName, numPassengers, passengers.length);
		for(int i = 0; i < numPassengers; ++i) {
				passengers[i].printDetails(); 
		}
	}
	
}
